# -*- coding: utf-8 -*-
"""FDA-Task2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VzOYzAVBih3DGiUPHtr-TKv4wfqP_IPw
"""

import pandas as pd
import numpy as np
from scipy.stats import f_oneway, ttest_ind
from statsmodels.stats.multicomp import pairwise_tukeyhsd

df=pd.read_csv('WineQuality.csv')

columns_drop=['fixed acidity','volatile acidity','citric acid','chlorides','total sulfur dioxide','alcohol']
df = df.drop(columns_drop, axis=1)

df.head()

df.info()

df.describe()

print(f"min_residual_sugar: {df['residual sugar'].min()}")
print(f"max_residual_sugar: {df['residual sugar'].max()}")
print(f"min_pH: {df['pH'].min()}")
print(f"max_pH: {df['pH'].max()}")
print(f"min_FSD: {df['free sulfur dioxide'].min()}")
print(f"max_FSD: {df['free sulfur dioxide'].max()}")
print(f"min_sulphates: {df['sulphates'].min()}")
print(f"max_sulphates: {df['sulphates'].max()}")
print(f"min_density: {df['density'].min()}")
print(f"max_density: {df['density'].max()}")
print(f"min_quality: {df['quality'].min()}")
print(f"max_quality: {df['quality'].max()}")

type_data = df['Type']
unique_values = np.unique(type_data)
print(unique_values)

df.dtypes

df.isna().sum()

# Categorical data is required for anova test, 'residual sugar' (low, medium, high):
df['residual_sugar_level'] = pd.cut(df['residual sugar'], bins=3, labels=['low', 'medium', 'high'])

# ANOVA test to check if there is a significant quality difference between 3 different sugar levels
low_sugar = df[df['residual_sugar_level'] == 'low']['quality']
medium_sugar = df[df['residual_sugar_level'] == 'medium']['quality']
high_sugar = df[df['residual_sugar_level'] == 'high']['quality']

f_statistic,p_value = f_oneway(low_sugar, medium_sugar, high_sugar)

print("ANOVA results:")
print("F-statistic:", f_statistic)
print("p-value:", p_value)

if p_value < 0.05:
    print("\nThere is a significant difference in quality among the three different sugar categories.")

else:
    print("\nThere is no significant difference in quality among the three different sugar categories.")

# Categorical data is required for anova test, 'pH' (low, medium, high):
df['pH_level'] = pd.cut(df['pH'], bins=3, labels=['low', 'medium', 'high'])

# ANOVA test to check if there is a significant quality difference between 3 different pH levels
low_pH = df[df['pH_level'] == 'low']['quality']
medium_pH = df[df['pH_level'] == 'medium']['quality']
high_pH = df[df['pH_level'] == 'high']['quality']

f_statistic,p_value = f_oneway(low_pH, medium_pH, high_pH)

print("ANOVA results:")
print("F-statistic:", f_statistic)
print("p-value:", p_value)

if p_value < 0.05:
    print("\nThere is a significant difference in quality among the three different pH categories.")

else:
    print("\nThere is no significant difference in quality among the three different pH categories.")

# Categorical data is required for anova test, ' free sulfur dioxide' (low, medium, high):
df['FSD_level'] = pd.cut(df['free sulfur dioxide'], bins=3, labels=['low', 'medium', 'high'])

# ANOVA test to check if there is a significant quality difference between 3 different FSD levels
low_FSD = df[df['FSD_level'] == 'low']['quality']
medium_FSD = df[df['FSD_level'] == 'medium']['quality']
high_FSD = df[df['FSD_level'] == 'high']['quality']

f_statistic,p_value = f_oneway(low_FSD, medium_FSD, high_FSD)

print("ANOVA results:")
print("F-statistic:", f_statistic)
print("p-value:", p_value)

if p_value < 0.05:
    print("\nThere is a significant difference in quality among the three different free sulfur dioxide categories.")

else:
    print("\nThere is no significant difference in quality among the three different free sulfur dioxide categories.")

# Categorize 'sulphates' into two groups: low and high
median_sulphates = df['sulphates'].median()
df['sulphates_level'] = ['low' if x < median_sulphates else 'high' for x in df['sulphates']]

# t-test on 'quality' between low and high sulphates
low_sulphates = df[df['sulphates_level'] == 'low']['quality']
high_sulphates = df[df['sulphates_level'] == 'high']['quality']

t_statistic, p_value = ttest_ind(low_sulphates, high_sulphates)

# Print t-test results
print("T-test results:")
print("T-statistic:", t_statistic)
print("p-value:", p_value)

# Interpret t-test results
if p_value < 0.05:
    print("\nThere is a significant difference in quality between low_sulphates and high_sulphates.")
else:
    print("\nThere is no significant difference in quality between low_sulphates and high_sulphates.")

# Categorize 'density' into two groups: low and high
median_density = df['density'].median()
df['density_level'] = ['low' if x < median_density else 'high' for x in df['density']]

# t-test on 'quality' between low and high density
low_density = df[df['density_level'] == 'low']['quality']
high_density = df[df['density_level'] == 'high']['quality']

t_statistic, p_value = ttest_ind(low_density, high_density)

# Print t-test results
print("T-test results:")
print("T-statistic:", t_statistic)
print("p-value:", p_value)

# Interpret t-test results
if p_value < 0.05:
    print("\nThere is a significant difference in quality between low_density and high_density.")
else:
    print("\nThere is no significant difference in quality between low_density and high_density.")

# t-test on 'quality' between white wine and red wine
white_wine = df[df['Type'] == 'White Wine']['quality']
red_wine = df[df['Type'] == 'Red Wine']['quality']

t_statistic, p_value = ttest_ind(white_wine, red_wine)

# Print t-test results
print("T-test results:")
print("T-statistic:", t_statistic)
print("p-value:", p_value)

# Interpret t-test results
if p_value < 0.05:
    print("\nThere is a significant difference in quality between white wine and red wine.")
else:
    print("\nThere is no significant difference in quality between white wine and red wine.")

#residual_sugar_level
tukey_pH = pairwise_tukeyhsd(endog=df['quality'], groups=df['residual_sugar_level'], alpha=0.05)
print(tukey_pH)
significant_pH_pairs = tukey_pH.reject.flatten()  # Flatten the 2D array
best_residual_sugar_level = df['residual_sugar_level'].iloc[significant_pH_pairs.argmax()]

print("Best residual sugar level:", best_residual_sugar_level)

#pH_level
tukey_pH = pairwise_tukeyhsd(endog=df['quality'], groups=df['pH_level'], alpha=0.05)
print(tukey_pH)
significant_pH_pairs = tukey_pH.reject.flatten()  # Flatten the 2D array
best_pH_level = df['pH_level'].iloc[significant_pH_pairs.argmax()]

print("Best pH Level:", best_pH_level)

#FSD_level
tukey_FSD = pairwise_tukeyhsd(endog=df['quality'], groups=df['FSD_level'], alpha=0.05)
print(tukey_FSD)
significant_FSD_pairs = tukey_FSD.reject.flatten()  # Flatten the 2D array
best_FSD_level = df['FSD_level'].iloc[significant_FSD_pairs.argmax()]

print("Best FSD Level:", best_FSD_level)

mean_low_sulphates = low_sulphates.mean()
mean_high_sulphates = high_sulphates.mean()
print("\nMean wine quality for low sulphates:", mean_low_sulphates)
print("Mean wine quality for high sulphates:", mean_high_sulphates)

#Sulfate_levels
if mean_low_sulphates > mean_high_sulphates:
        print("Low sulphates result in better wine quality.")
else:
        print("High sulphates result in better wine quality.")

mean_low_sugar = low_sugar.mean()
mean_medium_sugar = medium_sugar.mean()
mean_high_sugar = high_sugar.mean()

print("\nMean wine quality for low sugar:", mean_low_sugar)
print("Mean wine quality for medium sugar:", mean_medium_sugar)
print("Mean wine quality for high sugar:", mean_high_sugar)
#residual_sugar_levels
if mean_low_sugar > mean_high_sugar:

  if mean_low_sugar>mean_medium_sugar:
    print("Low sugar has the best wine quality.")
  else:
    print("Medium sugar has the best wine quality.")

else:

  if mean_high_sugar>mean_medium_sugar:
    print("High sugar has the best wine quality.")
  else:
    print("Medium sugar has the best wine quality.")

mean_low_pH = low_pH.mean()
mean_medium_pH = medium_pH.mean()
mean_high_pH = high_pH.mean()
print("\nMean wine quality for low sugar:", mean_low_pH)
print("Mean wine quality for medium sugar:", mean_medium_pH)
print("Mean wine quality for high sugar:", mean_high_pH)

#pH_levels
if mean_low_pH > mean_high_pH:

  if mean_low_pH>mean_medium_pH:
    print("Low pH has the best wine quality.")
  else:
    print("Medium pH hes the best wine quality.")

else:

  if mean_high_pH>mean_medium_pH:
    print("High pH has the best wine quality.")
  else:
    print("Medium pH has the best wine quality.")

mean_low_FSD = low_FSD.mean()
mean_medium_FSD = medium_FSD.mean()
mean_high_FSD = high_FSD.mean()

print("\nMean wine quality for low sugar:", mean_low_FSD)
print("Mean wine quality for medium sugar:", mean_medium_FSD)
print("Mean wine quality for high sugar:", mean_high_FSD)

#FSD_levels
if mean_low_FSD > mean_high_FSD:

  if mean_low_FSD>mean_high_FSD:
    print("Low FSD has the best wine quality.")
  else:
    print("Medium FSD hes the best wine quality.")

else:

  if mean_high_FSD>mean_medium_FSD:
    print("High FSD has the best wine quality.")
  else:
    print("Medium FSD has the best wine quality.")

mean_low_density = low_density.mean()
mean_high_density = high_density.mean()
print("\nMean wine quality for low density:", mean_low_density)
print("Mean wine quality for high density:", mean_high_density)

#Density_levels
if mean_low_density > mean_high_density:
        print("Low density result in better wine quality.")
else:
        print("High density result in better wine quality.")

mean_white_wine = white_wine.mean()
mean_red_wine = red_wine.mean()
print("\nMean wine quality for white wine:", mean_white_wine)
print("Mean wine quality for red wine:", mean_red_wine)

#Types of Wine
if mean_low_density > mean_high_density:
        print("White wine result in better wine quality.")
else:
        print("Red wine result in better wine quality.")